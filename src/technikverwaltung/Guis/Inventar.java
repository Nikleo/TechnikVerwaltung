/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package technikverwaltung.Guis;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import technikverwaltung.Database.InventarDB;
import technikverwaltung.Database.InventarKategoriesDB;
import technikverwaltung.Guis.SubGuis.InventarAdd;
import technikverwaltung.TechnikVerwaltung;

/**
 *
 * @author Programmieren
 */
public class Inventar extends javax.swing.JFrame {

    /**
     * Creates new form Inventar
     */
    public Inventar() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        neu = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        hinzufuegen = new javax.swing.JButton();
        entfernen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventar");

        Tree.setModel(this.loadKategories());
        Tree.setSelectionModel(Tree.getSelectionModel());
        Tree.setShowsRootHandles(true);
        Tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treevaluechange(evt);
            }
        });
        jScrollPane1.setViewportView(Tree);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Status", "Grundpreis", "Preis pro Tag", "Verwendungszweck"
            }
        ));
        Table.setEditingColumn(0);
        Table.setEditingRow(0);
        Table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(Table);

        neu.setText("neu");
        neu.setToolTipText("");
        neu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neuActionPerformed(evt);
            }
        });

        delete.setText("löschen");
        delete.setActionCommand("delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        hinzufuegen.setText("hinzufügen");
        hinzufuegen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hinzufuegenActionPerformed(evt);
            }
        });

        entfernen.setText("entfernen");
        entfernen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entfernenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(neu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delete)))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hinzufuegen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entfernen))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(neu)
                    .addComponent(delete)
                    .addComponent(hinzufuegen)
                    .addComponent(entfernen))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void treevaluechange(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treevaluechange
        TreePath[] paths = evt.getPaths();

        // Iterate through all affected nodes
        for (int i = 0; i < paths.length; i++) {
            if (evt.isAddedPath(i)) {
                // This node has been selected
                System.out.println(paths[i].getLastPathComponent().toString());
                this.selection = paths[i].getLastPathComponent().toString();
                this.Table.setModel(this.loadtable(paths[i].getLastPathComponent().toString()));
                break;
            } else {
                // This node has been deselected
                break;
            }
        }
    }//GEN-LAST:event_treevaluechange

    private void neuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neuActionPerformed

        String name = JOptionPane.showInputDialog("Bitte den Namen der neuen Kategorie angeben");

        InventarKategoriesDB neuekat = new InventarKategoriesDB();

        neuekat.setKategorie(name);
        neuekat.setOberkategorie(selection);

        TechnikVerwaltung.instance.getDbserver().save(neuekat);

        this.Tree.setModel(this.loadKategories());
    }//GEN-LAST:event_neuActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (!this.selection.equalsIgnoreCase("Ton") && !this.selection.equalsIgnoreCase("Licht") && !this.selection.equalsIgnoreCase("Strom")) {
            List<String> list = this.getSubcategories(selection);
            list.add(selection);
            for (String s : list) {
                List<InventarDB> fordel = TechnikVerwaltung.instance.getDbserver().find(InventarDB.class).where().in("Kategorie", s).findList();
                if (fordel.size() > 0) {
                    TechnikVerwaltung.instance.getDbserver().delete(fordel);
                }
                InventarKategoriesDB ds = TechnikVerwaltung.instance.getDbserver().find(InventarKategoriesDB.class).where().in("kategorie", s).findUnique();
                TechnikVerwaltung.instance.getDbserver().delete(ds);
            }
            this.Tree.setModel(this.loadKategories());
        } else {
            JOptionPane.showMessageDialog(rootPane, "Hauptkategorien können nicht gelöscht werden !");
        }
    }//GEN-LAST:event_deleteActionPerformed
    //inv hinzufügen
    private void hinzufuegenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hinzufuegenActionPerformed
        InventarAdd invadd = new InventarAdd();
        invadd.setVisible(true);
    }//GEN-LAST:event_hinzufuegenActionPerformed
    //inv entfernen
    private void entfernenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entfernenActionPerformed

        try{
        if(JOptionPane.showConfirmDialog(null, "Soll der Datensatz wirklich gelöscht werden ?") == 0){
            int id =  Integer.parseInt((String)this.Table.getModel().getValueAt(this.Table.getSelectedRow(), 0));
            
            InventarDB ds = TechnikVerwaltung.instance.getDbserver().find(InventarDB.class).where().in("id", id).findUnique();
            TechnikVerwaltung.instance.getDbserver().delete(ds);
            this.Table.setModel(this.loadtable(this.selection));
        }
        }catch (ArrayIndexOutOfBoundsException e){
            
        }
    }//GEN-LAST:event_entfernenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventar().setVisible(true);
            }
        });
    }

    public DefaultTreeModel loadKategories() {
        DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("Inventar");
        DefaultMutableTreeNode treeNode2 = new DefaultMutableTreeNode("colors");
        DefaultMutableTreeNode treeNode3 = new DefaultMutableTreeNode("blue");
        DefaultMutableTreeNode treeNode4 = new DefaultMutableTreeNode("blue");


        List<InventarKategoriesDB> kategorieliste = TechnikVerwaltung.instance.getDbserver().find(InventarKategoriesDB.class).findList();

        if (kategorieliste.size() > 0) {

            for (InventarKategoriesDB invKat : kategorieliste) {


                if (invKat.getOberkategorie().equalsIgnoreCase("Inventar")) {
                    treeNode2 = new javax.swing.tree.DefaultMutableTreeNode(invKat.getKategorie());
                    for (InventarKategoriesDB invKat1 : kategorieliste) {
                        if (invKat1.getOberkategorie().equalsIgnoreCase(invKat.getKategorie())) {
                            treeNode3 = new javax.swing.tree.DefaultMutableTreeNode(invKat1.getKategorie());
                            for (InventarKategoriesDB invKat2 : kategorieliste) {
                                if (invKat2.getOberkategorie().equalsIgnoreCase(invKat1.getKategorie())) {
                                    treeNode4 = new javax.swing.tree.DefaultMutableTreeNode(invKat2.getKategorie());
                                    treeNode3.add(treeNode4);
                                }
                            }
                            treeNode2.add(treeNode3);

                        }
                    }


                    treeNode1.add(treeNode2);
                }
            }



        }


        return new javax.swing.tree.DefaultTreeModel(treeNode1);
    }

    public DefaultTableModel loadtable(String node) {
        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String [] {
                "Id", "Name", "Status", "Grundpreis", "Preis pro Tag", "Verwendungszweck"
            }) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };

        List<InventarDB> db = TechnikVerwaltung.instance.getDbserver().find(InventarDB.class).findList();
        for (InventarDB inv : db) {
            if (inv.getKategorie().equalsIgnoreCase(node)) {
                model.addRow(new String[]{inv.getId().toString(), inv.getName(), inv.getStatus() + "", inv.getGrundpreis() + "€", inv.getPpt() + "€", inv.getVerwendung()});
            }
            List<String> list = this.getSubcategories(node);
            for (String subkat : list) {
                if (inv.getKategorie().equalsIgnoreCase(subkat)) {
                    model.addRow(new String[]{inv.getId().toString(), inv.getName(), inv.getStatus() + "", inv.getGrundpreis() + "€", inv.getPpt() + "€", inv.getVerwendung()});
                }
            }
        }

        return model;


    }

    public List<String> getSubcategories(String kategorie) {

        List<String> list = new ArrayList();

        List<InventarKategoriesDB> kategorieliste = TechnikVerwaltung.instance.getDbserver().find(InventarKategoriesDB.class).findList();
        if (kategorie.equalsIgnoreCase("Inventar")) {
            for (InventarKategoriesDB invKat : kategorieliste) {
                list.add(invKat.getKategorie());
            }
        } else {
            if (kategorieliste.size() > 0) {
                for (InventarKategoriesDB invKat : kategorieliste) {
                    if (kategorie.equalsIgnoreCase(invKat.getOberkategorie())) {
                        list.add(invKat.getKategorie());

                    }

                }
            }
            int id = 0;
            do {
                List<String> add = new ArrayList();
                for (String subkat : list) {
                    for (InventarKategoriesDB invKat : kategorieliste) {
                        if (subkat.equalsIgnoreCase(invKat.getOberkategorie())) {
                            add.add(invKat.getKategorie());

                        }

                    }
                }
                for (String addd : add) {
                    if (!list.contains(addd)) {
                        list.add(addd);
                    }
                }
                id = id + 1;
            } while (id <= 20);

        }
        System.out.println(list.toString());
        return list;

    }
    private String selection;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JTree Tree;
    private javax.swing.JButton delete;
    private javax.swing.JButton entfernen;
    private javax.swing.JButton hinzufuegen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton neu;
    // End of variables declaration//GEN-END:variables
}
